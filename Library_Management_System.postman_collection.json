{
  "info": {
    "name": "Library Management System",
    "description": "API collection for Library Management System",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Teachers",
      "item": [
        {
          "name": "Create Teacher",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Dr. Sarah Johnson\",\n    \"email\": \"sarah.johnson@example.com\",\n    \"subject\": \"English Literature\",\n    \"phone\": \"+1122334455\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/teachers",
              "host": ["{{base_url}}"],
              "path": ["teachers"]
            },
            "description": "Create a new teacher with valid data"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Teacher created successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "    pm.expect(jsonData.name).to.eql(\"Dr. Sarah Johnson\");",
                  "    pm.environment.set(\"teacher_id\", jsonData._id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get All Teachers",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}/teachers",
              "host": ["{{base_url}}"],
              "path": ["teachers"]
            },
            "description": "Get all teachers"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Teacher by ID",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}/teachers/{{teacher_id}}",
              "host": ["{{base_url}}"],
              "path": ["teachers", "{{teacher_id}}"]
            },
            "description": "Get a specific teacher by ID"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Teacher found\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData._id).to.eql(pm.environment.get(\"teacher_id\"));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Students",
      "item": [
        {
          "name": "Create Student",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"John Smith\",\n    \"email\": \"john.smith@example.com\",\n    \"grade\": \"10A\",\n    \"phone\": \"+1234567890\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/students",
              "host": ["{{base_url}}"],
              "path": ["students"]
            },
            "description": "Create a new student with valid data"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Student created successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "    pm.expect(jsonData.name).to.eql(\"John Smith\");",
                  "    pm.environment.set(\"student_id\", jsonData._id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get All Students",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}/students",
              "host": ["{{base_url}}"],
              "path": ["students"]
            },
            "description": "Get all students"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Student by ID",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}/students/{{student_id}}",
              "host": ["{{base_url}}"],
              "path": ["students", "{{student_id}}"]
            },
            "description": "Get a specific student by ID"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Student found\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData._id).to.eql(pm.environment.get(\"student_id\"));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Books",
      "item": [
        {
          "name": "Create Book",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"The Great Gatsby\",\n    \"author\": \"F. Scott Fitzgerald\",\n    \"isbn\": \"978-0743273565\",\n    \"publishedYear\": 1925,\n    \"quantity\": 5\n}"
            },
            "url": {
              "raw": "{{base_url}}/books",
              "host": ["{{base_url}}"],
              "path": ["books"]
            },
            "description": "Create a new book with valid data"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Book created successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "    pm.expect(jsonData.title).to.eql(\"The Great Gatsby\");",
                  "    pm.environment.set(\"book_id\", jsonData._id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get All Books",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}/books",
              "host": ["{{base_url}}"],
              "path": ["books"]
            },
            "description": "Get all books"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Book by ID",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}/books/{{book_id}}",
              "host": ["{{base_url}}"],
              "path": ["books", "{{book_id}}"]
            },
            "description": "Get a specific book by ID"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Book found\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData._id).to.eql(pm.environment.get(\"book_id\"));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Book Assignments",
      "item": [
        {
          "name": "Assign Book to Student",
          "request": {
            "method": "POST",
            "url": {
              "raw": "{{base_url}}/books/student/{{student_id}}/books/{{book_id}}",
              "host": ["{{base_url}}"],
              "path": [
                "books",
                "student",
                "{{student_id}}",
                "books",
                "{{book_id}}"
              ]
            },
            "description": "Assign a book to a student"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Book assigned successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Student's Books",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}/books/student/{{student_id}}",
              "host": ["{{base_url}}"],
              "path": ["books", "student", "{{student_id}}"]
            },
            "description": "Get all books assigned to a student"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Student's books retrieved\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    pm.expect(jsonData[0]._id).to.eql(pm.environment.get(\"book_id\"));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Remove Book from Student",
          "request": {
            "method": "DELETE",
            "url": {
              "raw": "{{base_url}}/books/student/{{student_id}}/books/{{book_id}}",
              "host": ["{{base_url}}"],
              "path": [
                "books",
                "student",
                "{{student_id}}",
                "books",
                "{{book_id}}"
              ]
            },
            "description": "Remove a book from a student"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Book removed successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Validation Tests",
      "item": [
        {
          "name": "Create Invalid Teacher",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Dr\",\n    \"email\": \"invalid-email\",\n    \"subject\": \"E\",\n    \"phone\": \"123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/teachers",
              "host": ["{{base_url}}"],
              "path": ["teachers"]
            },
            "description": "Test teacher validation with invalid data"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Validation error returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create Invalid Student",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"J\",\n    \"email\": \"invalid-email\",\n    \"grade\": \"\",\n    \"phone\": \"123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/students",
              "host": ["{{base_url}}"],
              "path": ["students"]
            },
            "description": "Test student validation with invalid data"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Validation error returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create Invalid Book",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"\",\n    \"author\": \"F\",\n    \"isbn\": \"invalid-isbn\",\n    \"publishedYear\": 1899,\n    \"quantity\": -1\n}"
            },
            "url": {
              "raw": "{{base_url}}/books",
              "host": ["{{base_url}}"],
              "path": ["books"]
            },
            "description": "Test book validation with invalid data"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Validation error returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3000/api"
    }
  ]
}
